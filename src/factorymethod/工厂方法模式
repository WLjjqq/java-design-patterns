1：定义
    工厂方法模式，又称工厂模式、多态工厂模式和虚拟构造器模式，通过定义工厂父类负责定义创建对象的公共接口，而子类则负责生成具体的对象。

2：主要作用
    将类的实例化（具体产品的创建）延迟到工厂类的子类（具体工厂）中完成，即由子类来决定应该实例化（创建）哪一个类。
3：组成
    组成（角色）                        关系                    作用
    抽象产品（Product）	                具体产品的父类；	    描述具体产品的公共接口
    具体产品（Concrete Product）	    抽象产品的子类；        工厂类创建的目标类	描述生产的具体产品
    抽象工厂（Creator）	                具体工厂的父类；	    描述具体工厂的公共接口
    具体工厂（Concrete Creator）	    抽象工厂的子类；        被外界调用	描述具体工厂；实现FactoryMethod工厂方法创建产品的实例
4：实例
实例概况

背景：小成有一间塑料加工厂（仅生产A类产品）；随着客户需求的变化，客户需要生产B类产品；
冲突：改变原有塑料加工厂的配置和变化非常困难，假设下一次客户需要再发生变化，再次改变将增大非常大的成本；
解决方案：小成决定置办塑料分厂B来生产B类产品；

5:优点
    1）：符合开-闭原则
    新增一种产品时，只需要增加相应的具体产品类和相应的工厂子类即可
    2）：符合单一职责原则
    每个具体工厂类只负责创建对应的产品
6：缺点
    1）：添加新产品时，除了增加新产品类外，还要提供与之对应的具体工厂类，系统类的个数将成对增加，
    在一定程度上增加了系统的复杂度；同时，有更多的类需要编译和运行，会给系统带来一些额外的开销；
    2）：由于考虑到系统的可扩展性，需要引入抽象层，在客户端代码中均使用抽象层进行定义，增加了系
    统的抽象性和理解难度，且在实现时可能需要用到DOM、反射等技术，增加了系统的实现难度。
    3）：虽然保证了工厂方法内的对修改关闭，但对于使用工厂方法的类，如果要更换另外一种产品，仍然
    需要修改实例化的具体工厂类；
    4）：一个具体工厂只能创建一种具体产品
7：使用场景
    1）：当一个类不知道它所需要的对象的类时
    在工厂方法模式中，客户端不需要知道具体产品类的类名，只需要知道所对应的工厂即可；
    2）：当一个类希望通过其子类来指定创建对象时
    在工厂方法模式中，对于抽象工厂类只需要提供一个创建产品的接口，而由其子类来确定具体要创建的
    对象，利用面向对象的多态性和里氏代换原则，在程序运行时，子类对象将覆盖父类对象，从而使得系统更容易扩展。
    3）：将创建对象的任务委托给多个工厂子类中的某一个，客户端在使用时可以无须关心是哪一个工厂子类
    创建产品子类，需要时再动态指定，可将具体工厂类的类名存储在配置文件或数据库中。